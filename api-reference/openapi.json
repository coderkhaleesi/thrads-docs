{
  "openapi": "3.1.0",
  "info": {
    "title": "Thrads API",
    "description": "Thrads API",
    "version": "0.0.1"
  },
  "servers": [
    {
      "url": "https://dev.thrads.ai",
      "description": "Production API server"
    }
  ],
  "paths": {
    "/health": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "Health Check",
        "operationId": "health_check_health_get",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        }
      }
    },
    "/": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "Read Root",
        "operationId": "read_root__get",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/query/get-ad/": {
      "post": {
        "tags": [
          "Query V1",
          "sponsored-query-prompt"
        ],
        "summary": "Get Sponsored Query Prompt",
        "description": "",
        "operationId": "get_sponsored_query_prompt_api_v1_query_get_ad__post",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SponsoredSearchPromptRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SponsoredSearchResponse"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIValidationErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/query/feedback/": {
      "post": {
        "tags": [
          "Query V1",
          "sponsored-query-feedback"
        ],
        "summary": "Submit Sponsored Query Feedback",
        "description": "",
        "operationId": "sponsored_query_feedback_api_v1_query_feedback__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SponsoredSearchFeedbackRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIValidationErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/prompt/get-ad/": {
      "post": {
        "tags": [
          "Prompt V1",
          "sponsored-chatbot-prompt"
        ],
        "summary": "Get Sponsored Chatbot Prompt",
        "description": "",
        "operationId": "get_sponsored_chatbot_prompt_api_v1_prompt_get_ad__post",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SponsoredChatbotPromptRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SponsoredPromptResponse"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIValidationErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/prompt/click/": {
      "post": {
        "tags": [
          "Prompt V1",
          "sponsored-prompt-click"
        ],
        "summary": "Register Sponsored Prompt Click",
        "description": "",
        "operationId": "sponsored_chatbot_prompt_click_api_v1_prompt_click__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SponsoredChatbotPromptClickRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIValidationErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/message/get-ad/": {
      "post": {
        "tags": [
          "Message V1",
          "sponsored-message"
        ],
        "summary": "Get Sponsored Message",
        "description": "",
        "operationId": "get_sponsored_message_api_v1_message_get_ad__post",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SponsoredMessageChatbotRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SponsoredMessageResponse"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIValidationErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/message/redirect/{token}": {
      "get": {
        "tags": [
          "Message V1",
          "redirect"
        ],
        "summary": "Redirect",
        "description": "Redirect to the actual URL and update analytics\nHandles both active and expired chat sessions",
        "operationId": "redirect_api_v1_message_redirect__token__get",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIValidationErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "thrads-api-key",
        "description": "API key for authenticating requests to the Thrads API. Get your API key from the Thrads Platform at https://platform.thrads.ai"
      }
    },
    "schemas": {
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "SponsoredChatbotPromptClickRequest": {
        "properties": {
          "token": {
            "type": "string",
            "title": "Token",
            "description": "Signed token from the original sponsored prompt response for secure click tracking and analytics"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "token"
        ],
        "title": "SponsoredChatbotPromptClickRequest",
        "description": "Request model for tracking clicks on sponsored chatbot prompts using secure tokens"
      },
      "SponsoredChatbotPromptRequest": {
        "properties": {
          "userId": {
            "type": "string",
            "maxLength": 100,
            "title": "User ID",
            "description": "Unique identifier for the user requesting the sponsored prompt. Must be the same for the same user across all conversations."
          },
          "chatId": {
            "type": "string",
            "maxLength": 100,
            "title": "Chat ID",
            "description": "Unique identifier for the chat session or conversation. Must be the same across the same conversation."
          },
          "userRegion": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Region",
            "description": "Geographic region of the user for localized ad targeting. Should be an ISO 3166-1 alpha-2 country code (e.g., 'US', 'GB', 'DE', 'JP')"
          },
          "content": {
            "anyOf": [
              {
                "type": "object",
                "properties": {
                  "user": {
                    "type": "string",
                    "description": "The user's message in the conversation"
                  },
                  "chatbot": {
                    "type": "string", 
                    "description": "The chatbot's response message"
                  }
                },
                "required": ["user", "chatbot"],
                "additionalProperties": false
              },
              {
                "type": "null"
              }
            ],
            "title": "Content",
            "description": "Conversation context MUST contain exactly two fields: 'user' and 'chatbot', both populated with strings representing the latest message exchange"
          },
          "metaData": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata",
            "description": "Additional context about user interests, conversation topic, or targeting preferences"
          },
          "force": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Force",
            "description": "If set to true it forces the ad generation regardless of frequency limits or other constraints. If set to false it inhibits the ad generation. Default is set to null which does not affect the ad generation"
          },
          "conversationOffset": {
            "type": "integer",
            "maximum": 20,
            "minimum": 0,
            "title": "Conversation Offset",
            "description": "Number of conversation turns to wait before showing the first ad",
            "default": 2
          },
          "adFrequencyLimit": {
            "type": "integer",
            "maximum": 20,
            "minimum": 0,
            "title": "Ad Frequency Limit",
            "description": "Number of turns to wait before showing the next ad",
            "default": 5
          },
          "production": {
            "type": "boolean",
            "title": "Production",
            "description": "Whether this is a production request (true) or sandbox/testing (false). Only production requests count for monetization.",
            "default": false
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "userId",
          "chatId"
        ],
        "title": "SponsoredChatbotPromptRequest",
        "description": "Request model for sponsored chatbot prompts with conversation context and targeting options"
      },
      "SponsoredMessageChatbotRequest": {
        "properties": {
          "userId": {
            "type": "string",
            "maxLength": 100,
            "title": "User ID",
            "description": "Unique identifier for the user requesting the sponsored message. Must be the same for the same user across all conversations."
          },
          "chatId": {
            "type": "string",
            "maxLength": 100,
            "title": "Chat ID",
            "description": "Unique identifier for the chat session or conversation. Must be the same across the same conversation."
          },
          "userRegion": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Region",
            "description": "Geographic region of the user for localized ad targeting. Should be an ISO 3166-1 alpha-2 country code (e.g., 'US', 'GB', 'DE', 'JP')"
          },
          "content": {
            "type": "object",
            "properties": {
              "user": {
                "type": "string",
                "description": "The user's message in the conversation"
              },
              "chatbot": {
                "type": "string",
                "description": "The chatbot's response message"
              }
            },
            "required": ["user", "chatbot"],
            "additionalProperties": false,
            "title": "Content",
            "description": "Required conversation context MUST contain exactly two fields: 'user' and 'chatbot', both populated with strings representing the latest message exchange"
          },
          "metaData": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata",
            "description": "Additional context about user interests, conversation topic, or targeting preferences"
          },
          "force": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Force",
            "description": "If set to true it forces the ad generation regardless of frequency limits or other constraints. If set to false it inhibits the ad generation. Default is set to null which does not affect the ad generation"
          },
          "conversationOffset": {
            "type": "integer",
            "maximum": 20,
            "minimum": 0,
            "title": "Conversation Offset",
            "description": "Number of conversation turns to wait before showing the first ad",
            "default": 2
          },
          "adFrequencyLimit": {
            "type": "integer",
            "maximum": 20,
            "minimum": 0,
            "title": "Ad Frequency Limit",
            "description": "Number of turns to wait before showing the next ad",
            "default": 5
          },
          "production": {
            "type": "boolean",
            "title": "Production",
            "description": "Whether this is a production request (true) or sandbox/testing (false). Only production requests count for monetization.",
            "default": false
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "userId",
          "chatId",
          "content"
        ],
        "title": "SponsoredMessageChatbotRequest",
        "description": "Request model for sponsored chatbot messages with required conversation context and targeting options"
      },
      "SponsoredSearchFeedbackRequest": {
        "properties": {
          "token": {
            "type": "string",
            "title": "Token",
            "description": "Signed token from the original query ad response for secure feedback attribution"
          },
          "clicked": {
            "type": "boolean",
            "title": "Clicked",
            "description": "Whether the user clicked on the sponsored query result or suggestion"
          },
          "user_search": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Search",
            "description": "The actual query query performed by the user (optional, used when user didn't click the suggestion)"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "token",
          "clicked"
        ],
        "title": "SponsoredSearchFeedbackRequest",
        "description": "Request model for submitting feedback on sponsored query results with click tracking and optional query context"
      },
      "SponsoredSearchPromptRequest": {
        "properties": {
          "userId": {
            "type": "string",
            "title": "User ID",
            "description": "Unique identifier for the user requesting the sponsored query prompt. Must be the same for the same user across all conversations."
          },
          "metaData": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata",
            "description": "Additional context about user interests, query intent, or targeting preferences"
          },
          "max_length": {
            "type": "integer",
            "minimum": 25,
            "maximum": 4096,
            "title": "Max Length",
            "description": "Maximum length of the generated query in characters",
            "default": 1024
          },
          "production": {
            "type": "boolean",
            "title": "Production",
            "description": "Whether this is a production request (true) or sandbox/testing (false). Only production requests count for monetization.",
            "default": false
          },
          "return_keywords_search": {
            "type": "boolean",
            "title": "Return Keywords Search",
            "description": "Whether to include suggested search keywords in the response for enhanced search functionality",
            "default": false
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "userId"
        ],
        "title": "SponsoredSearchPromptRequest",
        "description": "Request model for sponsored query prompts with optional keyword suggestions and targeting options"
      },
      "APIResponse": {
        "properties": {
          "apiVersion": {
            "type": "string",
            "title": "API Version",
            "description": "Version of the Thrads API being used"
          },
          "requestId": {
            "type": "string",
            "title": "Request ID",
            "description": "Unique identifier for this API request for tracking and debugging"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp",
            "description": "ISO 8601 timestamp when the response was generated"
          },
          "docsUrl": {
            "type": "string",
            "title": "Documentation URL",
            "description": "URL to the API documentation for reference"
          },
          "totalTime": {
            "type": "number",
            "title": "Total Time",
            "description": "Total processing time for the request in seconds"
          },
          "status": {
            "type": "string",
            "enum": ["success"],
            "title": "Status",
            "description": "Always 'success' for successful requests"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Human-readable message describing the successful response"
          },
          "data": {
            "type": "object",
            "title": "Data",
            "description": "Response payload containing the requested data"
          }
        },
        "type": "object",
        "required": [
          "apiVersion",
          "requestId",
          "timestamp",
          "docsUrl",
          "totalTime",
          "status",
          "message",
          "data"
        ],
        "title": "APIResponse",
        "description": ""
      },
      "SponsoredMessageData": {
        "properties": {
          "creative": {
            "type": "string",
            "title": "Creative",
            "description": "The message text generated"
          },
          "prod_name": {
            "type": "string",
            "title": "Product Name",
            "description": "Name of the sponsored product or service"
          },
          "img_url": {
            "type": "string",
            "title": "Image URL",
            "description": "URL to the product image. The image is a png file with aspect ratio 1:1 and resolution of 224x224"
          },
          "prod_url": {
            "type": "string",
            "title": "Product URL",
            "description": "Landing page URL for the sponsored product"
          }
        },
        "type": "object",
        "required": [
          "creative",
          "prod_name",
          "img_url",
          "prod_url"
        ],
        "title": "SponsoredMessageData",
        "description": ""
      },
      "SponsoredMessageResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/APIResponse"
          },
          {
            "properties": {
              "data": {
                "$ref": "#/components/schemas/SponsoredMessageData"
              }
            }
          }
        ],
        "title": "SponsoredMessageResponse"
      },
      "SponsoredSearchData": {
        "properties": {
          "creative": {
            "type": "string",
            "title": "Creative",
            "description": "The marketing creative content or query result text to display"
          },
          "prod_name": {
            "type": "string",
            "title": "Product Name",
            "description": "Name of the sponsored product or service"
          },
          "img_url": {
            "type": "string",
            "title": "Image URL",
            "description": "URL to the product image or promotional graphic"
          },
          "prod_url": {
            "type": "string",
            "title": "Product URL",
            "description": "Landing page URL for the sponsored product"
          },
          "keyword_search": {
            "type": "string",
            "title": "Keyword Search",
            "description": "Optional search keywords returned when return_keywords_search is enabled in the request"
          }
        },
        "type": "object",
        "required": [
          "creative",
          "prod_name",
          "img_url",
          "prod_url"
        ],
        "title": "SponsoredSearchData",
        "description": ""
      },
      "SponsoredSearchResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/APIResponse"
          },
          {
            "properties": {
              "data": {
                "$ref": "#/components/schemas/SponsoredSearchData"
              }
            }
          }
        ],
        "title": "SponsoredSearchResponse"
      },
      "SponsoredPromptData": {
        "properties": {
          "prompt": {
            "type": "string",
            "title": "Prompt",
            "description": "The generated prompt"
          },
          "link": {
            "type": "string",
            "title": "Link",
            "description": "Clickable URL for the sponsored content or product page"
          },
          "brand": {
            "type": "string",
            "title": "Brand",
            "description": "Brand or company name associated with the sponsored content"
          },
          "icon": {
            "type": "string",
            "title": "Icon",
            "description": "URL to the ad icon image"
          },
          "token": {
            "type": "string",
            "title": "Token",
            "description": "Secure tracking token used to record user interactions and clicks"
          }
        },
        "type": "object",
        "required": [
          "prompt",
          "link",
          "brand",
          "icon",
          "token"
        ],
        "title": "SponsoredPromptData",
        "description": "AI-generated sponsored prompt with brand information and tracking capabilities for chatbot integration"
      },
      "SponsoredPromptResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/APIResponse"
          },
          {
            "properties": {
              "data": {
                "$ref": "#/components/schemas/SponsoredPromptData"
              }
            }
          }
        ],
        "title": "SponsoredPromptResponse"
      },
      "APIErrorResponse": {
        "properties": {
          "apiVersion": {
            "type": "string",
            "title": "API Version",
            "description": "Version of the Thrads API being used"
          },
          "requestId": {
            "type": "string",
            "title": "Request ID",
            "description": "Unique identifier for this API request for tracking and debugging"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp",
            "description": "ISO 8601 timestamp when the error response was generated"
          },
          "docsUrl": {
            "type": "string",
            "title": "Documentation URL",
            "description": "URL to the API documentation for reference"
          },
          "totalTime": {
            "type": "number",
            "title": "Total Time",
            "description": "Total processing time before the error occurred in seconds"
          },
          "status": {
            "type": "string",
            "enum": ["error"],
            "title": "Status",
            "description": "Always 'error' for error responses"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Human-readable error message describing what went wrong"
          },
          "data": {
            "type": "object",
            "title": "Data",
            "description": "Always empty object for error responses"
          },
          "error": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "title": "Error Type",
                "description": "Type of error that occurred"
              },
              "code": {
                "type": "integer",
                "title": "Error Code",
                "description": "Numeric error code for programmatic handling"
              }
            },
            "required": ["type", "code"],
            "title": "Error Details",
            "description": "Structured error information with type and code"
          }
        },
        "type": "object",
        "required": [
          "apiVersion",
          "requestId",
          "timestamp",
          "docsUrl",
          "totalTime",
          "status",
          "message",
          "data",
          "error"
        ],
        "title": "APIErrorResponse",
        "description": "Standard error response wrapper for failed API requests with detailed error information"
      },
      "APIValidationErrorResponse": {
        "properties": {
          "apiVersion": {
            "type": "string",
            "title": "API Version",
            "description": "Version of the Thrads API being used"
          },
          "requestId": {
            "type": "string",
            "title": "Request ID",
            "description": "Unique identifier for this API request for tracking and debugging"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp",
            "description": "ISO 8601 timestamp when the validation error occurred"
          },
          "docsUrl": {
            "type": "string",
            "title": "Documentation URL",
            "description": "URL to the API documentation for reference"
          },
          "totalTime": {
            "type": "number",
            "title": "Total Time",
            "description": "Total processing time before validation failed in seconds"
          },
          "status": {
            "type": "string",
            "enum": ["error"],
            "title": "Status",
            "description": "Always 'error' for validation error responses"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Human-readable validation error message"
          },
          "data": {
            "type": "object",
            "title": "Data",
            "description": "Always empty object for validation error responses"
          },
          "error": {
            "type": "object",
            "properties": {
              "detail": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ValidationError"
                },
                "title": "Detail",
                "description": "List of validation errors with field locations and messages"
              }
            },
            "required": ["detail"],
            "title": "Validation Error Details",
            "description": "Structured validation error information"
          }
        },
        "type": "object",
        "required": [
          "apiVersion",
          "requestId",
          "timestamp",
          "docsUrl",
          "totalTime",
          "status",
          "message",
          "data",
          "error"
        ],
        "title": "APIValidationErrorResponse",
        "description": "Standard validation error response wrapper with detailed field validation errors"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    }
  }
}